This file contains code that can be temporarily pasted into
GS.SkyServer to allow test data to be generated.
Replace the call to AddAlignmentPoint in the SkyServer sync method with a call to GenerateTestModel 
        
        
        #region Generating alignment mode for testing ...
        private static readonly List<double[]> AlignmentModelPositions =  new List<double[]>
        {
            // SE Triangle
            new double[] {35, 100},     // 1
            new double[] {55, 97},     // 2
            new double[] {37, 91},     // 3
            // NE Triangle
            new double[] {47, 29},      // 4
            new double[] {36, 46},      // 5
            new double[] {29, 28},      // 6
            // NW Triangle
            new double[] {40, 302},      // 7
            new double[] {53, 317},      // 8
            new double[] {37, 319},      // 9
            // SW Triangle
            new double[] {32, 234},      // 10
            new double[] {49, 227},      // 11
            new double[] {35, 215},      // 12
            
            //// SE Target
            //new double[] {39, 100},      // 13
            //// NE Target
            //new double[] {37, 34},      // 14
            //// NW Target
            //new double[] {44, 313},      // 15
            //// SW Target
            //new double[] {39, 223}      // 16

        };

        private static readonly List<double[]> AlignmentTestPositions = new List<double[]>
        {
            // SE Target
            new double[] {39, 100},      // 13
            // NE Target
            new double[] {37, 34},      // 14
            // NW Target
            new double[] {44, 313},      // 15
            // SW Target
            new double[] {39, 223}      // 16
        };

        private static void GenerateTestModel()
        {
            AlignmentModel.ClearAlignmentPoints();
            DateTime utcNow = new DateTime(2021, 1, 13, 20, 7, 0);
            TimeSpan interval = new TimeSpan(0, 0, 30);
            foreach(var altAz in AlignmentModelPositions)
            {
                GenerateTestPoint(altAz, utcNow);
                utcNow += interval;
            }

            System.Diagnostics.Debug.WriteLine("============= Plot data =============");
            foreach (var pt in AlignmentModel.AlignmentPoints)
            {
                // System.Diagnostics.Debug.WriteLine($"{pt.MountXY.X:F4},{pt.MountXY.Y:F4},{pt.SkyXY.X:F4},{pt.SkyXY.Y:F4}");
                // System.Diagnostics.Debug.WriteLine($"{pt.MountXY.X}\t{pt.MountXY.Y}\t{pt.SkyXY.X}\t{pt.SkyXY.Y}\t{pt.SkyXY.Quadrant}");
                System.Diagnostics.Debug.WriteLine($"{pt.MountAxes[0]:F4},{pt.MountAxes[1]:F4},{pt.SkyAxes[0]:F4},{pt.SkyAxes[1]:F4}");
            }
            System.Diagnostics.Debug.WriteLine("============= Plot data =============");
            utcNow += interval;
            // Now run the tests
            foreach (var altAz in AlignmentTestPositions)
            {
                CompareTestPoint(altAz, utcNow);
                utcNow += interval;
            }

        }

        private static void GenerateTestPoint(double[] altAz, DateTime utcNow)
        {
            double lstNow = GetLocalSiderealTime(utcNow);
            double[] mountRaDec = Coordinate.AltAz2RaDec(altAz[0], altAz[1], SkySettings.Latitude, lstNow);
            double[] skyRaDec = Coordinate.AltAz2RaDec(altAz[0]+2.0, altAz[1]+2.0, SkySettings.Latitude, lstNow);
            // System.Diagnostics.Debug.WriteLine($"{altAz[0]}/{altAz[1]} => {mountRaDec[0]}/{mountRaDec[1]}");
            double[] calculatedAxes = Axes.RaDecToAxesXY(new[] { mountRaDec[0], mountRaDec[1] }, lstNow);
            double[] rawAxes = Axes.RaDecToAxesXY(new[] { skyRaDec[0], skyRaDec[1] }, lstNow);

            // Check if the calculated Axes is way off (as in from the alternative position)
            //if (Axes.IsFlipRequired(calculatedAxes))
            //{
            //    // System.Diagnostics.Debug.WriteLine("Flipped axes");
            //    calculatedAxes = Axes.GetAltAxisPosition(calculatedAxes);
            //    rawAxes = Axes.GetAltAxisPosition(rawAxes);
            //}



            // Mock calculated and raw axis position
            // double[] calculatedAxes = new double[]{axesYX[1], axesYX[0]};
            // Generate RaDec
            AlignmentModel.AddAlignmentPoint(
                new double[] { mountRaDec[0], mountRaDec[1] },
                calculatedAxes,
                rawAxes,
                new TimeRecord(utcNow, lstNow));

        }

        private static void CompareTestPoint(double[] altAz, DateTime utcNow)
        {
            double lstNow = GetLocalSiderealTime(utcNow);
            TimeRecord time = new TimeRecord(utcNow, lstNow); 
            double[] mountRaDec = Coordinate.AltAz2RaDec(altAz[0], altAz[1], SkySettings.Latitude, lstNow);
            double[] skyRaDec = Coordinate.AltAz2RaDec(altAz[0] + 2.0, altAz[1] + 2.0, SkySettings.Latitude, lstNow);

            double[] expectedCalculatedAxes = Axes.RaDecToAxesXY(new[] { mountRaDec[0], mountRaDec[1] }, lstNow);

            //// Check if the calculated Axes is way off (as in from the alternative position)
            //if (Axes.IsFlipRequired(expectedCalculatedAxes))
            //{
            //    expectedCalculatedAxes = Axes.GetAltAxisPosition(expectedCalculatedAxes);
            //}

            double[] expectedRawAxes = Axes.RaDecToAxesXY(new[] { skyRaDec[0], skyRaDec[1] }, lstNow);
            //if (Axes.IsFlipRequired(expectedRawAxes))
            //{
            //    expectedRawAxes = Axes.GetAltAxisPosition(expectedRawAxes);
            //}

            // Generate RaDec
            //System.Diagnostics.Debug.WriteLine($"\n=== Testing Alt/Az {altAz[0]:F4}/{altAz[1]:F4} ====");
            double[] rawAxes = AlignmentModel.GetSkyAxes(expectedCalculatedAxes, time);
            double[] calculatedAxes = AlignmentModel.GetMountAxes(expectedRawAxes, time);
            //System.Diagnostics.Debug.WriteLine($" Raw axes - expected: {expectedRawAxes[0]:F4}/{expectedRawAxes[1]:F4} actual: {rawAxes[0]:F4}/{rawAxes[1]:F4}");
            //System.Diagnostics.Debug.WriteLine($"Calc axes - expected: {expectedCalculatedAxes[0]:F4}/{expectedCalculatedAxes[1]:F4} actual: {calculatedAxes[0]:F4}/{calculatedAxes[1]:F4}");
            //System.Diagnostics.Debug.WriteLine($"=== Testing Alt/Az {altAz[0]:F4}/{altAz[1]:F4} ====\n");

        }

        #endregion
        
